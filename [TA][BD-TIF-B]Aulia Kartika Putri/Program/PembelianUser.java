/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coba;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;

/**
 *
 * @author Lenovo
 */
public class PembelianUser extends javax.swing.JFrame {
public int userId;
private Connection connection;
    /**
     * Creates new form PembelianUser
     */

    public PembelianUser() {
        initComponents();
        initializeDatabaseConnection(); 
        updateTabel(); 
        inisialisasi();
    }
    public PembelianUser(int userId) {
        initComponents();
        initializeDatabaseConnection(); 
        updateTabel();
        inisialisasi();
        this.userId=userId;
    }

private void initializeDatabaseConnection() {
    String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
            "database=SAMFOOD;" +
            "user=Gladys Abel;" +
            "password=231525;" +
            "encrypt=true;" +
            "trustServerCertificate=true;" +
            "loginTimeout=30;";
    try {
        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        connection = DriverManager.getConnection(connectionUrl);
        System.out.println("Koneksi berhasil!");
    } catch (ClassNotFoundException e) {
        System.err.println("Driver JDBC tidak ditemukan: " + e.getMessage());
    } catch (SQLException e) {
        System.err.println("Koneksi gagal: " + e.getMessage());
    }
}


private void simpanMenu() {
    
}


private void updateTabel() {
    DefaultTableModel model = (DefaultTableModel) jTable1_tampilMenu.getModel();
    model.setRowCount(0); 

    String query = "SELECT f.food_name, f.price, r.restaurant_name, r.restaurant_address " +
           "FROM Food f " +
           "JOIN Restaurant r ON f.restaurant_id = r.restaurant_id";

    try (Statement statement = connection.createStatement();
         ResultSet resultSet = statement.executeQuery(query)) {

        while (resultSet.next()) {
            String foodName = resultSet.getString("food_name");
            double price = resultSet.getDouble("price");
            String restaurantName = resultSet.getString("restaurant_name");
            String restaurantAddress = resultSet.getString("restaurant_address");

            model.addRow(new Object[]{foodName, price, restaurantName, restaurantAddress});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data: " + e.getMessage(),
                "Error Memuat Data", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1_tampilMenu = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1_inputMenu = new javax.swing.JTextField();
        jTextField2_imputQuantity = new javax.swing.JTextField();
        butBayar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_rincianPesanan = new javax.swing.JTable();
        butTambah = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbRestaurantName = new javax.swing.JComboBox<>();
        cmbRestaurant = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(242, 194, 194));

        jTable1_tampilMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "FoodName", "Price", "RestaurantName", "RestaurantAddress"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1_tampilMenu.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable1_tampilMenuAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(jTable1_tampilMenu);

        jLabel1.setText("FoodName");

        jLabel2.setText("Quantity");

        jTextField1_inputMenu.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTextField1_inputMenuAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTextField1_inputMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1_inputMenuActionPerformed(evt);
            }
        });

        jTextField2_imputQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2_imputQuantityActionPerformed(evt);
            }
        });

        butBayar.setText("Bayar");
        butBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBayarActionPerformed(evt);
            }
        });

        jTable_rincianPesanan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food_name", "Quantity", "Price", "Restaruant name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_rincianPesanan.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable_rincianPesananAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(jTable_rincianPesanan);

        butTambah.setText("Tambah");
        butTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTambahActionPerformed(evt);
            }
        });

        jLabel3.setText("RestaurantName");

        cmbRestaurantName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Restaurant", "Mie Gacoan", "Sego Cokot", "Nasi Goreng 69", "Umayumcha", "Geprek Kak Rose", "Mang Ujo" }));
        cmbRestaurantName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRestaurantNameActionPerformed(evt);
            }
        });

        cmbRestaurant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mie Gacoan", "Sego Cokot", "Nasi Goreng 69", "Umayumcha", "Geprek Kak Rose", "Mang Ujo" }));
        cmbRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRestaurantActionPerformed(evt);
            }
        });

        jButton1.setText("<< back");
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1_inputMenu)
                            .addComponent(jTextField2_imputQuantity)
                            .addComponent(cmbRestaurant, 0, 195, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 62, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(butTambah)
                        .addGap(79, 79, 79))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(butBayar)
                        .addGap(52, 52, 52))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(cmbRestaurantName, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbRestaurantName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jTextField1_inputMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2_imputQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(butTambah)
                .addGap(24, 24, 24)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(butBayar)
                .addGap(2, 2, 2)
                .addComponent(jButton1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBayarActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable_rincianPesanan.getModel();
    
    
    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "Tolong tambahkan pesanan ke keranjang sebelum melanjutkan.", "Keranjang Kosong", JOptionPane.WARNING_MESSAGE);
        return; 
    }

    Pembayaran pembayaranForm = new Pembayaran(this);  
    pembayaranForm.setVisible(true);
    }//GEN-LAST:event_butBayarActionPerformed

    private void jTextField1_inputMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1_inputMenuActionPerformed
       String foodName = jTextField1_inputMenu.getText().trim();
       if (foodName.isEmpty()) {
           JOptionPane.showMessageDialog(this, "Harap pilih makanan terlebih dahulu.", "Error Input", JOptionPane.ERROR_MESSAGE);
        return;
}

    }//GEN-LAST:event_jTextField1_inputMenuActionPerformed

    private void jTextField2_imputQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2_imputQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2_imputQuantityActionPerformed

    private void jTable1_tampilMenuAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable1_tampilMenuAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1_tampilMenuAncestorAdded

    private void jTable_rincianPesananAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable_rincianPesananAncestorAdded
       
    }//GEN-LAST:event_jTable_rincianPesananAncestorAdded

    private void butTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTambahActionPerformed
    String Restaurant = (String) cmbRestaurant.getSelectedItem(); 
    String foodName = jTextField1_inputMenu.getText().trim(); 
    String quantityText = jTextField2_imputQuantity.getText().trim(); 

    int quantity;
    try {
        quantity = Integer.parseInt(quantityText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Quantity harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

   
    if (foodName.isEmpty() || quantity <= 0) {
        JOptionPane.showMessageDialog(this, "Tolong masukkan nama makanan dan quantity yang valid.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try (Connection conn = DatabaseConnect.connectDB()) {
        String foodQuery = "SELECT food_id, price FROM Food f JOIN Restaurant r ON f.restaurant_id = r.restaurant_id " +
                "WHERE f.food_name = ? AND r.restaurant_name = ?";
        PreparedStatement psFood = conn.prepareStatement(foodQuery);
        psFood.setString(1, foodName);
        psFood.setString(2, Restaurant);
        ResultSet resultsFood = psFood.executeQuery();

        if (resultsFood.next()) {
            long foodId = resultsFood.getLong("food_id");
            double price = resultsFood.getDouble("price");

            
            DefaultTableModel model = (DefaultTableModel) jTable_rincianPesanan.getModel();
            model.addRow(new Object[]{foodName, quantity, price, Restaurant});

      
            jTextField1_inputMenu.setText("");
            jTextField2_imputQuantity.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Makanan tidak ditemukan di restoran yang dipilih.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal menyimpan data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_butTambahActionPerformed

    private void jTextField1_inputMenuAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTextField1_inputMenuAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1_inputMenuAncestorAdded

    private void cmbRestaurantNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRestaurantNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbRestaurantNameActionPerformed

    private void cmbRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRestaurantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbRestaurantActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MainMenu main = new MainMenu(this.userId);
        main.setVisible(true);
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PembelianUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PembelianUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PembelianUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PembelianUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

               java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PembelianUser().setVisible(true);
            
            }
        });
    }
    private void simpanOrder() {
        DefaultTableModel model = (DefaultTableModel) jTable_rincianPesanan.getModel();

        try (Connection conn = DatabaseConnect.connectDB()) {
            for (int i = 0; i < model.getRowCount(); i++) {
                String foodName = (String) model.getValueAt(i, 0);
                int quantity = (int) model.getValueAt(i, 1);
                String restaurantName = (String) model.getValueAt(i, 2);

                
                String orderSql = "INSERT INTO Orders (User_Id, order_status) VALUES (?, 'Pending')";
                PreparedStatement steatment = conn.prepareStatement(orderSql, PreparedStatement.RETURN_GENERATED_KEYS);
                steatment.setInt(1, userId);  
                steatment.executeUpdate();
                ResultSet generatedKeys = steatment.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int orderId = generatedKeys.getInt(1); 

                    
                    String detailSql = "INSERT INTO Detail_Pesanan (order_id, food_id, amounts) " +
                        "SELECT ?, food_id, ? FROM Food WHERE food_name = ? AND restaurant = ?";
                    PreparedStatement pstDetail = conn.prepareStatement(detailSql);
                    pstDetail.setInt(1, orderId);
                    pstDetail.setInt(2, quantity);
                    pstDetail.setString(3, foodName);
                    pstDetail.setString(4, restaurantName);
                    pstDetail.executeUpdate();
                }
            }

            JOptionPane.showMessageDialog(this, "Order berhasil disimpan!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void inisialisasi() {
    cmbRestaurantName.addActionListener(evt -> filterTabelRes());
}
    private void filterTabelRes() {
    DefaultTableModel model = (DefaultTableModel) jTable1_tampilMenu.getModel();
    model.setRowCount(0); // Clear existing data

    String selectedRestaurant = (String) cmbRestaurantName.getSelectedItem(); // Mendapatkan nama restoran yang dipilih

   
    String query;
    if ("Restaurant".equals(selectedRestaurant)) {
        
        query = "SELECT f.food_name, f.price, r.restaurant_name, r.restaurant_address " +
                "FROM Food f " +
                "JOIN Restaurant r ON f.restaurant_id = r.restaurant_id";
    } else {
       
        query = "SELECT f.food_name, f.price, r.restaurant_name, r.restaurant_address " +
                "FROM Food f " +
                "JOIN Restaurant r ON f.restaurant_id = r.restaurant_id " +
                "WHERE r.restaurant_name = ?";
    }

    try (PreparedStatement pst = connection.prepareStatement(query)) {
       
        if (!"Restaurant".equals(selectedRestaurant)) {
            pst.setString(1, selectedRestaurant); // Set nama restoran pada query
        }

        try (ResultSet resultSet = pst.executeQuery()) {
            while (resultSet.next()) {
                String foodName = resultSet.getString("food_name");
                double price = resultSet.getDouble("price");
                String restaurantName = resultSet.getString("restaurant_name");
                String restaurantAddress = resultSet.getString("restaurant_address");

                model.addRow(new Object[]{foodName, price, restaurantName, restaurantAddress});
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data: " + e.getMessage(),
                "Error Memuat Data", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
    public int TotalQuantity() {
    DefaultTableModel model = (DefaultTableModel) jTable_rincianPesanan.getModel();
    int totalQuantity = 0;

    for (int i = 0; i < model.getRowCount(); i++) {
        int quantity = (int) model.getValueAt(i, 1);
        totalQuantity += quantity;
    }

    return totalQuantity;
}
public JTable RincianPesanan() {
    return jTable_rincianPesanan;
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBayar;
    private javax.swing.JButton butTambah;
    private javax.swing.JComboBox<String> cmbRestaurant;
    private javax.swing.JComboBox<String> cmbRestaurantName;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1_tampilMenu;
    public javax.swing.JTable jTable_rincianPesanan;
    private javax.swing.JTextField jTextField1_inputMenu;
    private javax.swing.JTextField jTextField2_imputQuantity;
    // End of variables declaration//GEN-END:variables
}
