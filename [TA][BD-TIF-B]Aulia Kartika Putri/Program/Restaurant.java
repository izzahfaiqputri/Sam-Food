/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coba;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.awt.Color;


/**
 *
 * @author user
 */
public class Restaurant extends javax.swing.JFrame {

    /**
     * Creates new form cobajForm
     */
    public Restaurant() {
        initComponents();
        UpdateTabel();
        btnSave.setEnabled(false); 
        btnCancel.setEnabled(false);
        setTextFieldsEditable(false);
        jTable1.getSelectionModel().addListSelectionListener(event -> {
        if (!event.getValueIsAdjusting() && jTable1.getSelectedRow() != -1) {
            loadSelectedRowDataToFields(); 
        }
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSearchActionPerformed(evt);
        }
    });
    });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lanjutkanan = new javax.swing.JButton();
        kanan = new javax.swing.JButton();
        kiri = new javax.swing.JButton();
        lanjutKiri = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        IDjTextField1 = new javax.swing.JTextField();
        NAMEjTextField2 = new javax.swing.JTextField();
        ADDRESSjTextField3 = new javax.swing.JTextField();
        btnNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jTextFieldSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(244, 194, 194));

        jPanel1.setBackground(new java.awt.Color(244, 194, 194));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID Restaurant", "Restaurant Name", "Restaurant Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        lanjutkanan.setText(">>");
        lanjutkanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lanjutkananActionPerformed(evt);
            }
        });

        kanan.setText(">");
        kanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kananActionPerformed(evt);
            }
        });

        kiri.setText("<");
        kiri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kiriActionPerformed(evt);
            }
        });

        lanjutKiri.setText("<<");
        lanjutKiri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lanjutKiriActionPerformed(evt);
            }
        });

        jLabel1.setText("Restaurant ID");

        jLabel2.setText("Restaurant Name");

        jLabel3.setText("Restaurant Address");

        IDjTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDjTextField1ActionPerformed(evt);
            }
        });

        NAMEjTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NAMEjTextField2ActionPerformed(evt);
            }
        });

        ADDRESSjTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDRESSjTextField3ActionPerformed(evt);
            }
        });

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(244, 194, 194));
        btnBack.setText("<< back");
        btnBack.setBorder(null);
        btnBack.setContentAreaFilled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lanjutKiri)
                                        .addGap(34, 34, 34)
                                        .addComponent(kiri, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnNew)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnEdit)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(btnDelete)
                                        .addGap(121, 121, 121)
                                        .addComponent(btnSave)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnCancel))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(200, 200, 200)
                                        .addComponent(kanan, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(lanjutkanan))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSearch))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)))
                        .addContainerGap(8, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(NAMEjTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                            .addComponent(IDjTextField1)
                            .addComponent(ADDRESSjTextField3))
                        .addGap(91, 91, 91))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(btnBack)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(jTextFieldSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(kanan, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lanjutkanan))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(kiri)
                        .addComponent(lanjutKiri)))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IDjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(NAMEjTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ADDRESSjTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lanjutkananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lanjutkananActionPerformed
    currentRow = jTable1.getRowCount() - 1;
    jTable1.setRowSelectionInterval(currentRow, currentRow); 
    updateFieldsTabel(); 
    updateTombol();         // TODO add your handling code here:    
    }//GEN-LAST:event_lanjutkananActionPerformed

    private void kananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kananActionPerformed
        if (currentRow < jTable1.getRowCount() - 1) { 
        currentRow++;
        jTable1.setRowSelectionInterval(currentRow, currentRow);
        updateFieldsTabel(); 
    }
    updateTombol(); 
    }//GEN-LAST:event_kananActionPerformed

    private void IDjTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDjTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDjTextField1ActionPerformed

    private void NAMEjTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NAMEjTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NAMEjTextField2ActionPerformed

    private void ADDRESSjTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDRESSjTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ADDRESSjTextField3ActionPerformed
private boolean toggleDel = false;
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
                btnSave.setEnabled(true);
    btnCancel.setEnabled(true);

    
    btnNew.setEnabled(false);
    btnEdit.setEnabled(false);
    btnDelete.setEnabled(false);

    
    IDjTextField1.setForeground(Color.RED);
    NAMEjTextField2.setForeground(Color.RED);
    ADDRESSjTextField3.setForeground(Color.RED);
   
    toggleDel = true; 
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (toggleAddingNew) { 
        String restaurant_id = IDjTextField1.getText().trim();
        String restaurant_name = NAMEjTextField2.getText().trim();
        String restaurant_address = ADDRESSjTextField3.getText().trim();
       
       
        if (restaurant_id.isEmpty() || restaurant_name.isEmpty() || restaurant_address.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        String connectionUrl =
             "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
        String insertQuery = "INSERT INTO Restaurant (restaurant_id, restaurant_name, restaurant_address) VALUES (?, ?, ?)";

        try (Connection connection = DriverManager.getConnection(connectionUrl);
             PreparedStatement statement = connection.prepareStatement(insertQuery)) {
            statement.setInt(1, Integer.parseInt(restaurant_id));
            statement.setString(2, restaurant_name);
            statement.setString(3, restaurant_address);
            

            
            statement.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            
            toggleAddingNew = false;
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
            IDjTextField1.setEditable(false);
            UpdateTabel(); 
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menambahkan data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }else if (isEditing) {
        
        updateData();
        
        }else if (toggleDel) { 
            String restaurant_id = IDjTextField1.getText().trim();

            if (restaurant_id.isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "Tidak ada data yang dipilih untuk dihapus.", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
                return;
        }

        String deleteQuery = "DELETE FROM Restaurant WHERE restaurant_id = ?";
        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
        try (Connection connection = DriverManager.getConnection(connectionUrl);
             PreparedStatement statement = connection.prepareStatement(deleteQuery)) {

            
            statement.setInt(1, Integer.parseInt(restaurant_id));

            
            statement.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil dihapus!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            toggleDel = false;
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
            resetTextFieldColors();
            btnNew.setEnabled(true);
            btnEdit.setEnabled(true);
            btnDelete.setEnabled(true);
            UpdateTabel(); 
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
        resetTextFieldColors();
        setTextFieldsEditable(false); 

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        toggleAddingNew = true; 
        setTextFieldsEditable(true);
        clearTextFields(); 
        btnSave.setEnabled(true);      
        btnCancel.setEnabled(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private boolean isEditing = false;
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
     
// TODO add your handling code here:
         if (jTable1.getSelectedRow() != -1) { 
        IDjTextField1.setForeground(Color.RED);
        NAMEjTextField2.setForeground(Color.RED);
        ADDRESSjTextField3.setForeground(Color.RED);
        isEditing = true; 
        btnSave.setEnabled(true);
        btnCancel.setEnabled(true); 
        setTextFieldsEditable(true);
        IDjTextField1.setEditable(false);
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, "Silakan pilih data yang ingin diedit.", "Edit Data", javax.swing.JOptionPane.WARNING_MESSAGE);
    } 
    }//GEN-LAST:event_btnEditActionPerformed

    private void kiriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kiriActionPerformed
        if (currentRow > 0) { 
        currentRow--;
        jTable1.setRowSelectionInterval(currentRow, currentRow);
        updateFieldsTabel();
    }
    updateTombol();
    }//GEN-LAST:event_kiriActionPerformed

    private void lanjutKiriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lanjutKiriActionPerformed
    currentRow = 0; 
    jTable1.setRowSelectionInterval(currentRow, currentRow); 
    updateFieldsTabel(); 
    updateTombol(); 
    }//GEN-LAST:event_lanjutKiriActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchQuery = jTextFieldSearch.getText().trim(); 
        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";

    try (Connection connection = DriverManager.getConnection(connectionUrl);
         PreparedStatement statement = connection.prepareStatement(
                 searchQuery.isEmpty() ? "SELECT * FROM Restaurant" : "SELECT * FROM Restaurant WHERE restaurant_name LIKE ?"
         )) {

        if (!searchQuery.isEmpty()) {
            statement.setString(1, "%" + searchQuery + "%");
        }

        try (ResultSet resultSet = statement.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 

            while (resultSet.next()) {
               
                Object[] row = {
                    resultSet.getInt("restaurant_id"),
                    resultSet.getString("restaurant_name"),
                    resultSet.getString("restaurant_address"),
                                    };
                model.addRow(row);
            }

            if (model.getRowCount() > 0) {
                currentRow = 0; 
                jTable1.setRowSelectionInterval(currentRow, currentRow);
                updateFieldsTabel(); 
            } else {
                clearTextFields(); 
            }

            updateTombol(); 
        }
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mencari data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }        
   
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
       
        if (toggleAddingNew) { 
        toggleAddingNew = false; 
        btnSave.setEnabled(false); 
        btnCancel.setEnabled(false); 
        IDjTextField1.setEditable(false); 
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            IDjTextField1.setText(jTable1.getValueAt(selectedRow, 0).toString());
            NAMEjTextField2.setText(jTable1.getValueAt(selectedRow, 1).toString());
            ADDRESSjTextField3.setText(jTable1.getValueAt(selectedRow, 2).toString());
            
        } else {
            clearTextFields();
            }
        }else if (isEditing) {
        
        isEditing = false;
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);

       
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            IDjTextField1.setText(jTable1.getValueAt(selectedRow, 0).toString());
            NAMEjTextField2.setText(jTable1.getValueAt(selectedRow, 1).toString());
            ADDRESSjTextField3.setText(jTable1.getValueAt(selectedRow, 2).toString());
         
        }
    }else if ((toggleDel)) {
        IDjTextField1.setForeground(Color.BLACK);
        NAMEjTextField2.setForeground(Color.BLACK);
        ADDRESSjTextField3.setForeground(Color.BLACK);
       
        
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);

        toggleDel = false;
            
        }

    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MenuAdmin menuadmin1 = new MenuAdmin();
        menuadmin1.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void clearTextFields() {
        IDjTextField1.setText("");
        NAMEjTextField2.setText("");
        ADDRESSjTextField3.setText("");
    }
    private void updateData() {
        String restaurant_id = IDjTextField1.getText().trim();
        String restaurant_name = NAMEjTextField2.getText().trim();
        String restaurant_address = ADDRESSjTextField3.getText().trim();
    if (restaurant_name.isEmpty() || restaurant_address.isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    String connectionUrl =
         "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";

    String updateQuery = "UPDATE restaurant SET restaurant_name = ?, restaurant_address = ? WHERE restaurant_id = ?";

    try (Connection connection = DriverManager.getConnection(connectionUrl);
         PreparedStatement statement = connection.prepareStatement(updateQuery)) {

        statement.setString(1, restaurant_name);
        statement.setString(2, restaurant_address);
        statement.setInt(3, Integer.parseInt(restaurant_id));

        int rowsUpdated = statement.executeUpdate();
        if (rowsUpdated > 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil diperbarui.", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            UpdateTabel(); 
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Data gagal diperbarui.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat memperbarui data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

   
    isEditing = false;
    btnSave.setEnabled(false);
    btnCancel.setEnabled(false);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Restaurant().setVisible(true);

             String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
        try {
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            
            Connection connection = DriverManager.getConnection(connectionUrl);

            System.out.println("Koneksi berhasil!");

            
            connection.close();

        } catch (ClassNotFoundException e) {
            System.err.println("Restaurant tidak ditemukan: " + e.getMessage());
        } catch (SQLException e) {
            System.err.println("Koneksi gagal: " + e.getMessage());
        }
        }

    });
}
    private boolean toggleNavigating = false; 
    ResultSet allRS;
    boolean toggleInserted;
    private int currentRow = 0; 
    private DefaultTableModel searchModel; 
    private boolean toggleAddingNew = false;
          
    private void UpdateTabel() {
    String query = "SELECT * FROM Restaurant";
    String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
    try {
        Connection connection = DriverManager.getConnection(connectionUrl);
        PreparedStatement statement = connection.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        allRS = statement.executeQuery(); 

        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); 
        while (allRS.next()) {
            Object[] row = {
                allRS.getInt("restaurant_id"), 
                allRS.getString("restaurant_name"),
                allRS.getString("restaurant_address"),
            
            };
            model.addRow(row);
        }

       
        if (model.getRowCount() > 0) {
            allRS.first(); 
            loadSelectedRowDataToFields(); 
            
            kiri.setEnabled(false);
            lanjutKiri.setEnabled(false);
            kanan.setEnabled(true);
            lanjutkanan.setEnabled(true);
        }

    } catch (SQLException e) {
        System.err.println("Error saat mengisi tabel: " + e.getMessage());
    }
    }
    
    
    
    
     private void loadSelectedRowDataToFields() {
    try {
        
        if (allRS != null && !allRS.isAfterLast() && !allRS.isBeforeFirst()) {
            IDjTextField1.setText(allRS.getString("restaurant_id")); 
            NAMEjTextField2.setText(allRS.getString("restaurant_name")); 
            ADDRESSjTextField3.setText(allRS.getString("restaurant_address")); 
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    
}
    private void updateFieldsTabel() {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        IDjTextField1.setText(jTable1.getValueAt(selectedRow, 0).toString());
        NAMEjTextField2.setText(jTable1.getValueAt(selectedRow, 1).toString());
        ADDRESSjTextField3.setText(jTable1.getValueAt(selectedRow, 2).toString());
    }
}
    private void updateTombol() {
    kanan.setEnabled(currentRow < jTable1.getRowCount() - 1);
    kiri.setEnabled(currentRow > 0);
    lanjutkanan.setEnabled(currentRow < jTable1.getRowCount() - 1);
    lanjutKiri.setEnabled(currentRow > 0);
  }
private void setTextFieldsEditable(boolean editable) {
    IDjTextField1.setEditable(editable);
    NAMEjTextField2.setEditable(editable);
    ADDRESSjTextField3.setEditable(editable);

  }
   private void resetTextFieldColors() {
    IDjTextField1.setForeground(Color.BLACK);
    NAMEjTextField2.setForeground(Color.BLACK);
    ADDRESSjTextField3.setForeground(Color.BLACK);
}     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ADDRESSjTextField3;
    private javax.swing.JTextField IDjTextField1;
    private javax.swing.JTextField NAMEjTextField2;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JButton kanan;
    private javax.swing.JButton kiri;
    private javax.swing.JButton lanjutKiri;
    private javax.swing.JButton lanjutkanan;
    // End of variables declaration//GEN-END:variables
}                    
