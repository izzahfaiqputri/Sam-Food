/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coba;

import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class Payment extends javax.swing.JFrame {

    /**
     * Creates new form Payment
     */
    public Payment() {
        initComponents();
        UpdateTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ButSearch = new javax.swing.JButton();
        jTextField_Search = new javax.swing.JTextField();
        ButFirst = new javax.swing.JButton();
        ButPrev = new javax.swing.JButton();
        ButNext = new javax.swing.JButton();
        ButLast = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField_orderid = new javax.swing.JTextField();
        jTextField_paymentid = new javax.swing.JTextField();
        jTextField_fee = new javax.swing.JTextField();
        jTextField_price = new javax.swing.JTextField();
        btnNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(244, 194, 194));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order_Id", "Payment_Id", "Fee Driver", "Price Order"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(jTable1);

        ButSearch.setText("Search");
        ButSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButSearchActionPerformed(evt);
            }
        });

        jTextField_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_SearchActionPerformed(evt);
            }
        });

        ButFirst.setText("<<");
        ButFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButFirstActionPerformed(evt);
            }
        });

        ButPrev.setText("<");
        ButPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButPrevActionPerformed(evt);
            }
        });

        ButNext.setText(">");
        ButNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButNextActionPerformed(evt);
            }
        });

        ButLast.setText(">>");
        ButLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButLastActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 12)); // NOI18N
        jLabel1.setText("ID Order");

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 12)); // NOI18N
        jLabel2.setText("ID Payment");

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 12)); // NOI18N
        jLabel3.setText("Fee Driver");

        jLabel4.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 12)); // NOI18N
        jLabel4.setText("Price Driver");

        jTextField_orderid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_orderidActionPerformed(evt);
            }
        });

        jTextField_fee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_feeActionPerformed(evt);
            }
        });

        jTextField_price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_priceActionPerformed(evt);
            }
        });

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setText("<< back");
        btnBack.setContentAreaFilled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnSave)
                                .addGap(51, 51, 51)
                                .addComponent(btnCancel)
                                .addGap(142, 142, 142))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(103, 103, 103)
                                                    .addComponent(ButFirst)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(ButPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(0, 0, Short.MAX_VALUE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jTextField_orderid)
                                                        .addComponent(jTextField_paymentid, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnNew)
                                                .addGap(39, 39, 39)
                                                .addComponent(btnEdit)
                                                .addGap(40, 40, 40)
                                                .addComponent(btnDel)
                                                .addGap(182, 182, 182)))
                                        .addGap(52, 52, 52)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField_price, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField_fee, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addComponent(ButNext, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(ButLast))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jTextField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(ButSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(25, 25, 25))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack)
                        .addGap(683, 683, 683)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButFirst)
                    .addComponent(ButPrev)
                    .addComponent(ButNext)
                    .addComponent(ButLast))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jTextField_orderid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_fee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_paymentid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnEdit)
                    .addComponent(btnDel)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButSearchActionPerformed
        String searchQuery = jTextField_Search.getText().trim(); // Ambil teks pencarian
        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
    try (Connection connection = java.sql.DriverManager.getConnection(connectionUrl);
         java.sql.PreparedStatement statement = connection.prepareStatement(
                 searchQuery.isEmpty() ? "SELECT * FROM payment" : "SELECT * FROM payment WHERE payment_id LIKE ?"
         )) {

        if (!searchQuery.isEmpty()) {
            statement.setString(1, "%" + searchQuery + "%"); 
        }

        try (ResultSet r = statement.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 

            while (r.next()) {
                Object[] row = {
                    r.getInt("order_id"),
                    r.getString("payment_id"),
                    r.getString("fee_driver"),
                    r.getString("price_order"),
                    
                };
                model.addRow(row);
            }

            if (model.getRowCount() > 0) {
                currentRow = 0; 
                jTable1.setRowSelectionInterval(currentRow, currentRow);
                updateTabel(); 
            } else {
                hapusTextFields(); 
            }

            updateTombol(); 
        }
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mencari data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    } 
    }//GEN-LAST:event_ButSearchActionPerformed

    private void ButFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButFirstActionPerformed
    currentRow = 0; 
    jTable1.setRowSelectionInterval(currentRow, currentRow); 
    updateTabel(); 
    updateTombol();
    }//GEN-LAST:event_ButFirstActionPerformed

    private void ButNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButNextActionPerformed
        if (currentRow < jTable1.getRowCount() - 1) { 
        currentRow++;
        jTable1.setRowSelectionInterval(currentRow, currentRow); 
        updateTabel(); 
    }
    updateTombol(); 
    }//GEN-LAST:event_ButNextActionPerformed

    private void jTextField_orderidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_orderidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_orderidActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        toggleNew = true; 
        Editabel(true);
        hapusTextFields(); 
        btnSave.setEnabled(true); 
        btnCancel.setEnabled(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void jTextField_feeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_feeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_feeActionPerformed

    private void jTextField_priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_priceActionPerformed

    private void jTextField_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_SearchActionPerformed

    private void jTable1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1AncestorAdded

    private void ButPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButPrevActionPerformed
        if (currentRow > 0) { 
        currentRow--;
        jTable1.setRowSelectionInterval(currentRow, currentRow); 
        updateTabel(); 
    }
    updateTombol();
    }//GEN-LAST:event_ButPrevActionPerformed

    private void ButLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButLastActionPerformed
    currentRow = jTable1.getRowCount() - 1; 
    jTable1.setRowSelectionInterval(currentRow, currentRow); 
    updateTabel(); 
    updateTombol(); 
    }//GEN-LAST:event_ButLastActionPerformed
private boolean toggleEdit = false;
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (jTable1.getSelectedRow() != -1) { 
        jTextField_orderid.setForeground(Color.RED);
        jTextField_paymentid.setForeground(Color.RED);
        jTextField_fee.setForeground(Color.RED);
        jTextField_price.setForeground(Color.RED);
       
        toggleEdit = true; 
        btnSave.setEnabled(true); 
        btnCancel.setEnabled(true); 
        Editabel(true);
        jTextField_orderid.setEditable(false); 
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, "Silakan pilih data yang ingin diedit.", "Edit Data", javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnEditActionPerformed
private boolean toggleDel = false;
    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        btnSave.setEnabled(true);
    btnCancel.setEnabled(true);

    
    btnNew.setEnabled(false);
    btnEdit.setEnabled(false);
    btnDel.setEnabled(false);

    
    jTextField_orderid.setForeground(Color.RED);
    jTextField_paymentid.setForeground(Color.RED);
    jTextField_fee.setForeground(Color.RED);
    jTextField_price.setForeground(Color.RED);

    toggleDel = true; 
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (toggleNew) { 
        String orderid = jTextField_orderid.getText().trim();
        String paymentid = jTextField_paymentid.getText().trim();
        String fee = jTextField_fee.getText().trim();
        String price = jTextField_price.getText().trim();
       

        if (orderid.isEmpty() || paymentid.isEmpty() || fee.isEmpty() || price.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
        String insertQuery = "INSERT INTO Users (User_Id, username, password, phone_number, email) VALUES (?, ?, ?, ?, ?)";

        try (Connection connection = java.sql.DriverManager.getConnection(connectionUrl);
             java.sql.PreparedStatement s = connection.prepareStatement(insertQuery)) {

    
            s.setInt(1, Integer.parseInt(orderid));
            s.setString(2, paymentid);
            s.setString(3, fee);
            s.setString(4, price);
           

        
            s.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            
            toggleNew = false;
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
            jTextField_orderid.setEditable(false);
            UpdateTableData(); 
        } catch (java.sql.SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menambahkan data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }else if (toggleEdit) {
        updateData();
        
        }else if (toggleDel) { 
            String idUser = jTextField_orderid.getText().trim();

            if (idUser.isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "Tidak ada data yang dipilih untuk dihapus.", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
                return;
        }

        String delete = "DELETE FROM Payment WHERE Payment_Id = ?";
        String connectionUrl =
             "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
        try (Connection connection = java.sql.DriverManager.getConnection(connectionUrl);
             java.sql.PreparedStatement s = connection.prepareStatement(delete)) {

            
            s.setInt(1, Integer.parseInt(idUser));

           
            s.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil dihapus!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        
            toggleDel = false;
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
            resetColors();
             btnNew.setEnabled(true);
            btnEdit.setEnabled(true);
            btnDel.setEnabled(true);
            UpdateTableData(); 
        } catch (java.sql.SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
        resetColors();
        Editabel(false);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        if (toggleNew) { 
        toggleNew = false; 
        btnSave.setEnabled(false); 
        btnCancel.setEnabled(false); 
        jTextField_orderid.setEditable(false); 

        
        int selectedBaris = jTable1.getSelectedRow();
        if (selectedBaris != -1) {
            jTextField_orderid.setText(jTable1.getValueAt(selectedBaris, 0).toString());
            jTextField_paymentid.setText(jTable1.getValueAt(selectedBaris, 1).toString());
            jTextField_fee.setText(jTable1.getValueAt(selectedBaris, 2).toString());
            jTextField_price.setText(jTable1.getValueAt(selectedBaris, 3).toString());
            
        } else {
            hapusTextFields(); 
            }
        }else if (toggleEdit) {
        toggleEdit = false;
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);

        
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            jTextField_orderid.setText(jTable1.getValueAt(selectedRow, 0).toString());
            jTextField_paymentid.setText(jTable1.getValueAt(selectedRow, 1).toString());
            jTextField_fee.setText(jTable1.getValueAt(selectedRow, 2).toString());
            jTextField_price.setText(jTable1.getValueAt(selectedRow, 3).toString());
            
        }
    }else if ((toggleDel)) {
        jTextField_orderid.setForeground(Color.BLACK);
        jTextField_paymentid.setForeground(Color.BLACK);
        jTextField_fee.setForeground(Color.BLACK);
        jTextField_price.setForeground(Color.BLACK);
        

       
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDel.setEnabled(true);

        toggleDel = false;
            
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MenuAdmin menuadmin1 = new MenuAdmin();
        menuadmin1.setVisible(true);
        this.dispose();          
    }//GEN-LAST:event_btnBackActionPerformed
private void hapusTextFields() {
        jTextField_orderid.setText("");
        jTextField_paymentid.setText("");
        jTextField_fee.setText("");
        jTextField_price.setText("");
       
    }
    private void updateData() {
        String orderid = jTextField_orderid.getText().trim();
        String paymentid = jTextField_paymentid.getText().trim();
        String fee = jTextField_fee.getText().trim();
        String price = jTextField_price.getText().trim();
        
    if (paymentid.isEmpty() || fee.isEmpty() || price.isEmpty() ) {
        javax.swing.JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    String connectionUrl =
        "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";

    String updateQuery = "UPDATE Users SET payment_id = ?, fee = ?, price = ?, WHERE order_id = ?";

    try (Connection connection = java.sql.DriverManager.getConnection(connectionUrl);
         java.sql.PreparedStatement s = connection.prepareStatement(updateQuery)) {

        s.setString(1, orderid);
        s.setString(2, paymentid);
        s.setString(3, fee);
        s.setString(4, price);
        

        int rowsUpdated = s.executeUpdate();
        if (rowsUpdated > 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil diperbarui.", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            UpdateTableData(); 
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Data gagal diperbarui.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    } catch (java.sql.SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat memperbarui data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    toggleEdit = false;
    btnSave.setEnabled(false);
    btnCancel.setEnabled(false);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Payment().setVisible(true);
            }
            public static void main(String[] args) {
        
  
        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            try ( 
                    Connection connection = java.sql.DriverManager.getConnection(connectionUrl)) {
                System.out.println("Koneksi berhasil!");
                
            }

        } catch (ClassNotFoundException e) {
            System.err.println("Payment tidak ditemukan: " + e.getMessage());
        } catch (java.sql.SQLException e) {
            System.err.println("Koneksi gagal: " + e.getMessage());

    }
            }
        });
    }
    private boolean isNavigating = false; 
    ResultSet allRS;
    boolean isInserted;
    private int currentRow = 0; 
    private DefaultTableModel search; 
    private boolean toggleNew = false;
    
    private void UpdateTableData() {
    String query = "SELECT * FROM Payment"; 
    String connectionUrl =
           "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
    try (Connection connection = java.sql.DriverManager.getConnection(connectionUrl);
         java.sql.PreparedStatement statement = connection.prepareStatement(query);
         ResultSet r = statement.executeQuery()) {

        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); 

        while (r.next()) {
            Object[] row = {
                r.getLong("order_id"), 
                r.getInt("payment_id"),
                r.getFloat("fee_driver"),
                r.getFloat("price_order"),
          
            };
            model.addRow(row);
        }

    } catch (java.sql.SQLException e) {
        System.err.println("Error saat mengisi tabel: " + e.getMessage());
}
}
     private void resetColors() {
    jTextField_orderid.setForeground(Color.BLACK);
    jTextField_paymentid.setForeground(Color.BLACK);
    jTextField_fee.setForeground(Color.BLACK);
    jTextField_price.setForeground(Color.BLACK);
    
}   
    private void updateTombol() {
    ButNext.setEnabled(currentRow < jTable1.getRowCount() - 1);
    ButPrev.setEnabled(currentRow > 0);
    ButLast.setEnabled(currentRow < jTable1.getRowCount() - 1);
    ButFirst.setEnabled(currentRow > 0);
}
    private void updateTabel() {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        jTextField_orderid.setText(jTable1.getValueAt(selectedRow, 0).toString());
        jTextField_paymentid.setText(jTable1.getValueAt(selectedRow, 1).toString());
        jTextField_fee.setText(jTable1.getValueAt(selectedRow, 2).toString());
        jTextField_price.setText(jTable1.getValueAt(selectedRow, 3).toString());
        
    }
}
    private void Editabel(boolean editable) {
    jTextField_orderid.setEditable(editable);
    jTextField_paymentid.setEditable(editable);
    jTextField_fee.setEditable(editable);
    jTextField_price.setEditable(editable);
    
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButFirst;
    private javax.swing.JButton ButLast;
    private javax.swing.JButton ButNext;
    private javax.swing.JButton ButPrev;
    private javax.swing.JButton ButSearch;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField_Search;
    private javax.swing.JTextField jTextField_fee;
    private javax.swing.JTextField jTextField_orderid;
    private javax.swing.JTextField jTextField_paymentid;
    private javax.swing.JTextField jTextField_price;
    // End of variables declaration//GEN-END:variables
}
