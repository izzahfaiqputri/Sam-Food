/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coba;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Farah
 */
public class RiwayatForm extends javax.swing.JFrame {

    /**
     * Creates new form HistoryForm
     */
    private int userid;
    private String username;
    public RiwayatForm() {
        initComponents();
    }
    public RiwayatForm(String username, int iduser) {
        userid=iduser;
        this.username=username;
        initComponents();
        updateHistory(userid);
        System.out.println(userid);
        inisialisasi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        cbRestaurant = new javax.swing.JComboBox<>();
        cbstatus_order = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(244, 194, 194));

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "food name", "restaurant", "amounts", "status order"
            }
        ));
        jScrollPane1.setViewportView(historyTable);

        cbRestaurant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Restaurant", "Mie Gacoan", "Sego Cokot", "Nasi Goreng 69", "Umayumcha", "Geprek Kak Rose", "Mang Ujo" }));
        cbRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRestaurantActionPerformed(evt);
            }
        });

        cbstatus_order.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Status Order", "Done", "Cancelled", "Pending" }));
        cbstatus_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbstatus_orderActionPerformed(evt);
            }
        });

        jButton1.setText("<< back");
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(cbRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbstatus_order, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbstatus_order, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(9, 9, 9))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRestaurantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRestaurantActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MainMenu menu1 = new MainMenu(username, userid);
        menu1.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbstatus_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbstatus_orderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbstatus_orderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RiwayatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RiwayatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RiwayatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RiwayatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RiwayatForm().setVisible(true);
            }
        });
    }
    private void updateHistory(int userId) {
    DefaultTableModel model = (DefaultTableModel) historyTable.getModel();
    model.setRowCount(0); 

    try (Connection connect = DatabaseConnect.connectDB()) {
        String query_sql = """
            SELECT 
                f.food_name, 
                r.restaurant_name, 
                o.amounts, 
                o.order_status
            FROM 
                orders o
            JOIN 
                Detail_Pesanan dp ON o.order_id = dp.order_id
            JOIN 
                Food f ON dp.food_id = f.food_id
            JOIN 
                Restaurant r ON r.restaurant_id = f.restaurant_id
            WHERE 
                o.User_Id = ?;
            """;

        PreparedStatement a = connect.prepareStatement(query_sql);
        a.setInt(1, userId); 
        ResultSet r = a.executeQuery();
        if (!r.isBeforeFirst()) {
    System.out.println("No data found for User_Id: " + userId);
} else {
    System.out.println("Data found!");
}

        while (r.next()) {
            Object[] row = {
                r.getString("food_name"),     
                r.getString("restaurant_name"),   
                r.getInt("amounts"),         
                r.getString("order_status")  
            };
            model.addRow(row); 
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
    private void filterRestoran() {
    DefaultTableModel model = (DefaultTableModel) historyTable.getModel();
    model.setRowCount(0); 

    String pilihanRestoran = (String) cbRestaurant.getSelectedItem(); 
    String pilihanStatus = (String) cbstatus_order.getSelectedItem();

    try (Connection connect = DatabaseConnect.connectDB()) {
        String sql;
        if ("Restaurant".equals(pilihanRestoran)) {
            
            sql = """
                SELECT 
                    f.food_name, 
                    r.restaurant_name, 
                    o.amounts, 
                    o.order_status
                FROM 
                    orders o
                JOIN 
                    Detail_Pesanan dp ON o.order_id = dp.order_id
                JOIN 
                    Food f ON dp.food_id = f.food_id
                JOIN 
                    Restaurant r ON r.restaurant_id = f.restaurant_id
                WHERE 
                    o.User_Id = ?;
                """;
        } else {
           
            sql = """
                SELECT 
                    f.food_name, 
                    r.restaurant_name, 
                    o.amounts, 
                    o.order_status
                FROM 
                    orders o
                JOIN 
                    Detail_Pesanan dp ON o.order_id = dp.order_id
                JOIN 
                    Food f ON dp.food_id = f.food_id
                JOIN 
                    Restaurant r ON r.restaurant_id = f.restaurant_id
                WHERE 
                    o.User_Id = ? AND r.restaurant_name = ?;
                """;
        }

        PreparedStatement a = connect.prepareStatement(sql);
        a.setInt(1, userid); 
        if (!"Restaurant".equals(pilihanRestoran)) {
            a.setString(2, pilihanRestoran); 
        }

        ResultSet r = a.executeQuery();

   
        while (r.next()) {
            Object[] row = {
                r.getString("food_name"),
                r.getString("restaurant_name"),
                r.getInt("amounts"),
                r.getString("order_status")
            };
            model.addRow(row);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
    private void filterTabel() {
        DefaultTableModel model = (DefaultTableModel) historyTable.getModel();
        model.setRowCount(0);

        String pilihanRestoran = (String) cbRestaurant.getSelectedItem();
        String pilihanStatus = (String) cbstatus_order.getSelectedItem();

        try (Connection connect = DatabaseConnect.connectDB()) {
            StringBuilder sql_query = new StringBuilder("""
                SELECT 
                    f.food_name, 
                    r.restaurant_name, 
                    o.amounts, 
                    o.order_status
                FROM 
                    orders o
                JOIN 
                    Detail_Pesanan dp ON o.order_id = dp.order_id
                JOIN 
                    Food f ON dp.food_id = f.food_id
                JOIN 
                    Restaurant r ON r.restaurant_id = f.restaurant_id
                WHERE 
                    o.User_Id = ?
                """);

            if (!"Restaurant".equals(pilihanRestoran)) {
                sql_query.append(" AND r.restaurant_name = ?");
            }

            if (!"Status Order".equals(pilihanStatus)) {
                sql_query.append(" AND o.order_status = ?");
            }

            PreparedStatement a = connect.prepareStatement(sql_query.toString());
            a.setInt(1, userid);

            int parIndex = 2;

            if (!"Restaurant".equals(pilihanRestoran)) {
                a.setString(parIndex++, pilihanRestoran);
            }
            if (!"Status Order".equals(pilihanStatus)) {
                a.setString(parIndex, pilihanStatus);
            }

            ResultSet r = a.executeQuery();

            while (r.next()) {
                Object[] row = {
                    r.getString("food_name"),
                    r.getString("restaurant_name"),
                    r.getInt("amounts"),
                    r.getString("order_status")
                };
                model.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void inisialisasi(){
    cbRestaurant.addActionListener(evt -> filterRestoran());
    cbstatus_order.addActionListener(evt -> filterTabel());
    }


    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbRestaurant;
    private javax.swing.JComboBox<String> cbstatus_order;
    private javax.swing.JTable historyTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
