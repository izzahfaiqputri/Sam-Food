/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coba;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Farah
 */
public class TabelMethodPayment extends javax.swing.JFrame {

    /**
     * Creates new form MethodPayment
     */
    public TabelMethodPayment() {
        initComponents();
        UpdateTabel();
        btnSave.setEnabled(false);      
        btnCancel.setEnabled(false);
        Editable(false);
        jTable1.getSelectionModel().addListSelectionListener(event -> {
        if (!event.getValueIsAdjusting() && jTable1.getSelectedRow() != -1) {
            UpdateRowData(); 
        }
        btn_search.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btn_searchActionPerformed(evt);
        }
    });
    });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField_Search = new javax.swing.JTextField();
        btn_search = new javax.swing.JButton();
        butLast = new javax.swing.JButton();
        butNext = new javax.swing.JButton();
        butPrev = new javax.swing.JButton();
        butFirst = new javax.swing.JButton();
        IDPayment = new javax.swing.JLabel();
        jTextField_IDPayment = new javax.swing.JTextField();
        Method = new javax.swing.JLabel();
        jTextField_Method = new javax.swing.JTextField();
        btnNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(244, 194, 194));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Payment_id", "Method"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTextField_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_SearchActionPerformed(evt);
            }
        });

        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        butLast.setText(">>");
        butLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLastActionPerformed(evt);
            }
        });

        butNext.setText(">");
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });

        butPrev.setText("<");
        butPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrevActionPerformed(evt);
            }
        });

        butFirst.setText("<<");
        butFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFirstActionPerformed(evt);
            }
        });

        IDPayment.setText("ID Payment");

        Method.setText("Method");

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnBack.setText("<< back");
        btnBack.setContentAreaFilled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(btnNew)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnEdit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnDel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSave))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(butFirst)
                                                .addGap(18, 18, 18)
                                                .addComponent(butPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(IDPayment)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jTextField_IDPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(Method, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jTextField_Method, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(66, 66, 66)
                                        .addComponent(butNext, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(butLast)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCancel))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnBack))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jTextField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_search)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butLast)
                    .addComponent(butNext)
                    .addComponent(butPrev)
                    .addComponent(butFirst))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDPayment)
                    .addComponent(jTextField_IDPayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Method)
                    .addComponent(jTextField_Method, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnEdit)
                    .addComponent(btnDel)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFirstActionPerformed
        currentRow = 0; 
    jTable1.setRowSelectionInterval(currentRow, currentRow);
    updateFields(); 
    updateTombol(); 
    }//GEN-LAST:event_butFirstActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        if (toggleNew) { 
        toggleNew = false; 
        btnSave.setEnabled(false); 
        btnCancel.setEnabled(false);
        jTextField_IDPayment.setEditable(false);  

        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            jTextField_IDPayment.setText(jTable1.getValueAt(selectedRow, 0).toString());
            jTextField_Method.setText(jTable1.getValueAt(selectedRow, 1).toString());

        } else {
            clearFields();
            }
        }else if (toggleedit) {
        
        toggleedit = false;
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);

        
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            jTextField_IDPayment.setText(jTable1.getValueAt(selectedRow, 0).toString());
            jTextField_Method.setText(jTable1.getValueAt(selectedRow, 1).toString());

        }
    }else if ((toggleDel)) {
        jTextField_IDPayment.setForeground(Color.BLACK);
        jTextField_Method.setForeground(Color.BLACK);


      
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDel.setEnabled(true);

        toggleDel = false;
    }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MenuAdmin menuadmin1 = new MenuAdmin();
        menuadmin1.setVisible(true);
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void jTextField_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_SearchActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        String searchQuery = jTextField_Search.getText().trim(); 
        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
            "database=SAMFOOD;" +
            "user=Gladys Abel;" +
            "password=231525;" +
            "encrypt=true;" +
            "trustServerCertificate=true;" +
            "loginTimeout=30;";;
    try (Connection connection = DriverManager.getConnection(connectionUrl);
         PreparedStatement statement = connection.prepareStatement(
                 searchQuery.isEmpty() ? "SELECT * FROM Method_Payment" : "SELECT * FROM Method_Payment WHERE payment_id LIKE ?"
         )) {

        if (!searchQuery.isEmpty()) {
            statement.setString(1, "%" + searchQuery + "%"); 
        }

        try (ResultSet r = statement.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 

            while (r.next()) {
                Object[] row = {
                    r.getInt("payment_id"),
                    r.getString("method"),

                };
                model.addRow(row);
            }

            if (model.getRowCount() > 0) {
                currentRow = 0; 
                jTable1.setRowSelectionInterval(currentRow, currentRow);
                updateFields(); 
            } else {
                clearFields();
            }

            updateTombol(); 
        }
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mencari data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }        // TODO add your handling code here:
    }//GEN-LAST:event_btn_searchActionPerformed

    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed
        if (currentRow < jTable1.getRowCount() - 1) {
        currentRow++;
        jTable1.setRowSelectionInterval(currentRow, currentRow); 
        updateFields(); 
    }
    updateTombol(); 
    }//GEN-LAST:event_butNextActionPerformed

    private void butLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLastActionPerformed
        currentRow = jTable1.getRowCount() - 1; 
    jTable1.setRowSelectionInterval(currentRow, currentRow); 
    updateFields(); 
    updateTombol(); 
    }//GEN-LAST:event_butLastActionPerformed

    private void butPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrevActionPerformed
        if (currentRow > 0) { 
        currentRow--;
        jTable1.setRowSelectionInterval(currentRow, currentRow); 
        updateFields(); 
    }
    updateTombol(); 
    }//GEN-LAST:event_butPrevActionPerformed
    private boolean toggleedit = false;
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (jTable1.getSelectedRow() != -1) { 
            jTextField_IDPayment.setForeground(Color.RED);
            jTextField_Method.setForeground(Color.RED);
        toggleedit = true; 
        btnSave.setEnabled(true); 
        btnCancel.setEnabled(true); 
        Editable(true);
        jTextField_IDPayment.setEditable(false); 
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, "Silakan pilih data yang ingin diedit.", "Edit Data", javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnEditActionPerformed
    private boolean toggleDel = false;
    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        btnSave.setEnabled(true);
    btnCancel.setEnabled(true);

    
    btnNew.setEnabled(false);
    btnEdit.setEnabled(false);
    btnDel.setEnabled(false);

    jTextField_IDPayment.setForeground(Color.RED);
    jTextField_Method.setForeground(Color.RED);

    toggleDel = true;
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (toggleNew) { 
        String idPayment = jTextField_IDPayment.getText().trim();
        String method = jTextField_Method.getText().trim();

       
        if (idPayment.isEmpty() || method.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
            "database=SAMFOOD;" +
            "user=Gladys Abel;" +
            "password=231525;" +
            "encrypt=true;" +
            "trustServerCertificate=true;" +
            "loginTimeout=30;";
        String insertQuery = "INSERT INTO Method_Payment (payment_id, method) VALUES (?, ?)";

        try (Connection connection = DriverManager.getConnection(connectionUrl);
             PreparedStatement statement = connection.prepareStatement(insertQuery)) {

         
            statement.setInt(1, Integer.parseInt(idPayment));
            statement.setString(2, method);
            
         
            statement.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);

           
            toggleNew = false;
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
            jTextField_IDPayment.setEditable(false);
            UpdateTabel(); 
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menambahkan data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }else if (toggleedit) {
      
        updateData();
    }else if (toggleDel) { 
        String idUser = jTextField_IDPayment.getText().trim();

        if (idUser.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Tidak ada data yang dipilih untuk dihapus.", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        String deleteQuery = "DELETE FROM Method_payment WHERE method = ?";
        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
            "database=SAMFOOD;" +
            "user=Gladys Abel;" +
            "password=231525;" +
            "encrypt=true;" +
            "trustServerCertificate=true;" +
            "loginTimeout=30;";
        try (Connection connection = DriverManager.getConnection(connectionUrl);
             PreparedStatement statement = connection.prepareStatement(deleteQuery)) {

            
            statement.setInt(1, Integer.parseInt(idUser));

            statement.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil dihapus!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            
            toggleDel = false;
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
            resetTextFieldColors();
             btnNew.setEnabled(true);
            btnEdit.setEnabled(true);
            btnDel.setEnabled(true);
            UpdateTabel(); 
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
        resetTextFieldColors();
        Editable(false); 
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        toggleNew = true; 
        Editable(true);
        clearFields(); 
        btnSave.setEnabled(true);       
        btnCancel.setEnabled(true);
    }//GEN-LAST:event_btnNewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TabelMethodPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TabelMethodPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TabelMethodPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TabelMethodPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TabelMethodPayment().setVisible(true);
                String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
            "database=SAMFOOD;" +
            "user=Gladys Abel;" +
            "password=231525;" +
            "encrypt=true;" +
            "trustServerCertificate=true;" +
            "loginTimeout=30;";
        try {
          
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

          
            Connection connection = DriverManager.getConnection(connectionUrl);

            System.out.println("Koneksi berhasil!");

           
            connection.close();

        } catch (ClassNotFoundException e) {
            System.err.println("Driver tidak ditemukan: " + e.getMessage());
        } catch (SQLException e) {
            System.err.println("Koneksi gagal: " + e.getMessage());
        }
            }
        });
    }
    private boolean isNavigating = false; 
    ResultSet allRS;
    boolean toggleInserted;
    private int currentRow = 0; 
    private DefaultTableModel searchModel; 
    private boolean toggleNew = false;
    
    private void clearFields() {
        jTextField_IDPayment.setText("");
        jTextField_Method.setText("");
        
    }
    private void updateData() {
        String idPayment = jTextField_IDPayment.getText().trim();
        String method = jTextField_Method.getText().trim();


    if (idPayment.isEmpty() || method.isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }
    String connectionUrl =
        "jdbc:sqlserver://GLADYSABELVG:1433;" +
            "database=SAMFOOD;" +
            "user=Gladys Abel;" +
            "password=231525;" +
            "encrypt=true;" +
            "trustServerCertificate=true;" +
            "loginTimeout=30;";
    String updateQuery = "UPDATE Method_Payment SET method = ? WHERE payment_id = ?";

    try (Connection connection = DriverManager.getConnection(connectionUrl);
         PreparedStatement s = connection.prepareStatement(updateQuery)) {

        s.setString(1, method);
        s.setInt(2, Integer.parseInt(idPayment));

        int rowsUpdated = s.executeUpdate();
        if (rowsUpdated > 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil diperbarui.", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            UpdateTabel();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Data gagal diperbarui.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat memperbarui data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

   
    toggleedit = false;
    btnSave.setEnabled(false);
    btnCancel.setEnabled(false);
}
    
    private void UpdateTabel() {
    String query = "SELECT * FROM Method_Payment"; 
    String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
            "database=SAMFOOD;" +
            "user=Gladys Abel;" +
            "password=231525;" +
            "encrypt=true;" +
            "trustServerCertificate=true;" +
            "loginTimeout=30;";
    try {
        Connection connection = DriverManager.getConnection(connectionUrl);
        PreparedStatement statement = connection.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        allRS = statement.executeQuery(); 

       
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); 

        while (allRS.next()) {
            Object[] row = {
                allRS.getInt("payment_id"), 
                allRS.getString("method"),
            };
            model.addRow(row);
        }

        if (model.getRowCount() > 0) {
            allRS.first(); 
            UpdateRowData(); 
            
            butPrev.setEnabled(false);
            butFirst.setEnabled(false);
            butNext.setEnabled(true);
            butLast.setEnabled(true);
        }

    } catch (SQLException e) {
        System.err.println("Error saat mengisi tabel: " + e.getMessage());
    }
    }
    private void UpdateRowData() {
    try {
        
        if (allRS != null && !allRS.isAfterLast() && !allRS.isBeforeFirst()) {
            jTextField_IDPayment.setText(allRS.getString("payment_id")); // ID User
            jTextField_Method.setText(allRS.getString("method")); // Username
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    }
    private void resetTextFieldColors() {
    jTextField_IDPayment.setForeground(Color.BLACK);
    jTextField_Method.setForeground(Color.BLACK);
}   
    private void updateTombol() {
    butNext.setEnabled(currentRow < jTable1.getRowCount() - 1);
    butPrev.setEnabled(currentRow > 0);
    butLast.setEnabled(currentRow < jTable1.getRowCount() - 1);
    butFirst.setEnabled(currentRow > 0);
}
    private void updateFields() {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        jTextField_IDPayment.setText(jTable1.getValueAt(selectedRow, 0).toString());
        jTextField_Method.setText(jTable1.getValueAt(selectedRow, 1).toString());
    }
}
    private void Editable(boolean editable) {
    jTextField_IDPayment.setEditable(editable);
    jTextField_Method.setEditable(editable);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IDPayment;
    private javax.swing.JLabel Method;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton butFirst;
    private javax.swing.JButton butLast;
    private javax.swing.JButton butNext;
    private javax.swing.JButton butPrev;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField_IDPayment;
    private javax.swing.JTextField jTextField_Method;
    private javax.swing.JTextField jTextField_Search;
    // End of variables declaration//GEN-END:variables
}
