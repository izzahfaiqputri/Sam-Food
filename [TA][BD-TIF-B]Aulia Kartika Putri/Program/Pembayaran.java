/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package coba;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
//import net.sf.jasperreports.ant.JRException;
//import org.springframework.util.ResourceUtils;
import java.io.*;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.*;



/**
 *
 * @author Lenovo
 */
public class Pembayaran extends javax.swing.JFrame {
 private PembelianUser parentForm;
    /**
     * Creates new form Pembayaran
     */
    public Pembayaran(PembelianUser parentForm) {
        initComponents();
        this.parentForm=parentForm;
    }
    
    public Pembayaran() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rbCash = new javax.swing.JRadioButton();
        rbQris = new javax.swing.JRadioButton();
        BtnBayar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(242, 194, 194));

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel1.setText("Metode Pembayaran ");

        buttonGroup1.add(rbCash);
        rbCash.setText("Cash");
        rbCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCashActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbQris);
        rbQris.setText("QRIS");
        rbQris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbQrisActionPerformed(evt);
            }
        });

        BtnBayar.setText("Bayar");
        BtnBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBayarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(BtnBayar)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbQris, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbCash, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)))
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbCash)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbQris)
                .addGap(12, 12, 12)
                .addComponent(BtnBayar)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbCashActionPerformed

    private void rbQrisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbQrisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbQrisActionPerformed

    private void BtnBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBayarActionPerformed
        String metodePembayaran = "";
    
    if (rbCash.isSelected()) {
        metodePembayaran = "Cash";
    } else if (rbQris.isSelected()) {
        metodePembayaran = "Qris";
    } else {
        JOptionPane.showMessageDialog(this, "Tolong pilih metode pembayaran.", "Error", JOptionPane.ERROR_MESSAGE);
        return; 
    }


    StringBuilder foodIds = new StringBuilder();
    DefaultTableModel model = (DefaultTableModel) parentForm.jTable_rincianPesanan.getModel();
    
    for (int i = 0; i < model.getRowCount(); i++) {
    String foodName = model.getValueAt(i, 0).toString();  
    
   
    String foodId = FoodId(foodName);
    
    if (foodIds.length() > 0) {
        foodIds.append(",");  
    }
    
    foodIds.append(foodId);  
}

    
    simpanTransaksi(parentForm.userId, 9999997, metodePembayaran, foodIds.toString());
    }//GEN-LAST:event_BtnBayarActionPerformed
    public String FoodId(String foodName) {
    String foodId = null;
    String query = "SELECT food_id FROM Food WHERE food_name = ?";

    try (Connection conn = DatabaseConnect.connectDB()) {
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, foodName);  
            
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    foodId = rs.getString("food_id"); 
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    
    return foodId;  
}
    
  private void simpanTransaksi(int userId, long driverId, String paymentMethod, String foodIds) {
    try (Connection conn = DatabaseConnect.connectDB()) {
        conn.setAutoCommit(false); 
        
        int order_idBaru = NextOrderId(conn);
        int payment_idBaru = paymentIdSelanjutnya(conn);
        int totalQuantity = parentForm.TotalQuantity();
        double totalprice = calculateTotalPriceOrder();
        
        System.out.println(userId);
        System.out.println(driverId);
        System.out.println(paymentMethod);
        System.out.println(foodIds);
        System.out.println(order_idBaru);
        System.out.println(payment_idBaru);
        System.out.println(totalQuantity);
        System.out.println(totalprice);
        

        String sql = "EXEC create_transaction ?, ?, ?, ?, ?, ?, ?, ?";
        try (CallableStatement stmt = conn.prepareCall(sql)) {
            stmt.setInt(1, userId);           
            stmt.setLong(2, driverId);         
            stmt.setString(3, paymentMethod);  
            stmt.setString(4, foodIds);       
            stmt.setInt(5, order_idBaru);       
            stmt.setInt(6, payment_idBaru);     
            stmt.setInt(7, totalQuantity);     
            stmt.setDouble(8, totalprice);     

            stmt.execute();
            conn.commit();
            printNota(order_idBaru);
            MainMenu menu1=new MainMenu(parentForm.userId);
            menu1.setVisible(true);
            this.dispose();
            JOptionPane.showMessageDialog(null, "Pesanan berhasil diproses. Order ID: " + order_idBaru);

        } catch (SQLException e) {
            conn.rollback();
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}  
    
    private double calculateTotalPriceOrder() {
    DefaultTableModel model = (DefaultTableModel) parentForm.jTable_rincianPesanan.getModel();
    double totalPrice = 0;
    double feeDriver = 5000;  
    for (int i = 0; i < model.getRowCount(); i++) {
        Object priceObj = model.getValueAt(i, 2);  
        Object quantityObj = model.getValueAt(i, 1); 

        double price = 0;
        int quantity = 0;
        System.out.println("Item " + i + " - PriceObj: " + priceObj + ", QuantityObj: " + quantityObj);

        if (priceObj instanceof Integer) {
            price = ((Integer) priceObj).doubleValue();  
        } else if (priceObj instanceof Double) {
            price = (Double) priceObj;  
        } else {
            System.out.println("Unexpected data type for quantity: " + priceObj.getClass());
        }

        if (quantityObj instanceof Double) {
            quantity = ((Double) quantityObj).intValue();  
        } else if (quantityObj instanceof Integer) {
            quantity = (Integer) quantityObj;  
        } else {
            System.out.println("Unexpected data type for quantity: " + quantityObj.getClass());
        }
        
System.out.println("Price: " + price + ", Quantity: " + quantity);  
        
        totalPrice += (price * quantity); 
    }

   
    totalPrice += feeDriver;
System.out.println("Total Price (including fee): " + totalPrice);
    return totalPrice;   
}
     private int NextOrderId(Connection conn) throws SQLException {
        String maxOrderIdSql = "SELECT MAX(order_id) AS last_order_id FROM Orders";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(maxOrderIdSql);
        int lastOrderId = 0;
        if (rs.next()) {
            lastOrderId = rs.getInt("last_order_id");
        }
        return lastOrderId + 1;
    }
     private void simpanOrder(String selectedPaymentMethod) {
        DefaultTableModel model = (DefaultTableModel) parentForm.jTable_rincianPesanan.getModel();
        int totalQuantity = parentForm.TotalQuantity();  

        try (Connection conn = DatabaseConnect.connectDB()) {
          
            String orderSql = "INSERT INTO Orders (order_id, User_Id, order_status, amounts) VALUES (?, ?, 'Pending', ?)";
            PreparedStatement Order = conn.prepareStatement(orderSql, PreparedStatement.RETURN_GENERATED_KEYS);
            
 
            int newOrderId = NextOrderId(conn);

            Order.setInt(1, newOrderId);
            Order.setInt(2, parentForm.userId);
            Order.setInt(3, totalQuantity);  
            Order.executeUpdate();

      
            String detailSql = "INSERT INTO Detail_Pesanan (order_id, food_id) VALUES (?, ?)";
            PreparedStatement Detail = conn.prepareStatement(detailSql);
            
            for (int i = 0; i < model.getRowCount(); i++) {
                String foodName = (String) model.getValueAt(i, 0);
                int quantity = (int) model.getValueAt(i, 1);

                
                String foodIdQuery = "SELECT food_id FROM Food WHERE food_name = ? AND restaurant_id = (SELECT restaurant_id FROM Restaurant WHERE restaurant_name = ?)";
                PreparedStatement pstFood = conn.prepareStatement(foodIdQuery);
                pstFood.setString(1, foodName);
                pstFood.setString(2, (String) model.getValueAt(i, 3));  
                ResultSet resultFood = pstFood.executeQuery();

                if (resultFood.next()) {
                    long foodId = resultFood.getLong("food_id");
                    Detail.setInt(1, newOrderId);  
                    Detail.setLong(2, foodId); 
                    Detail.executeUpdate();
                }
            }
            int paymentId = savePaymentToDatabase(newOrderId, selectedPaymentMethod);
            saveMethodPayment(paymentId, selectedPaymentMethod);
            printNota(newOrderId);
            MainMenu menu1=new MainMenu(parentForm.userId);
            menu1.setVisible(true);
            this.dispose();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
    }
     private int paymentIdSelanjutnya(Connection conn) throws SQLException {
    String maxPaymentIdSql = "SELECT MAX(payment_id) AS last_payment_id FROM Payment";
    Statement st = conn.createStatement();
    ResultSet result = st.executeQuery(maxPaymentIdSql);
    int lastPaymentId = 0;
    if (result.next()) {
        lastPaymentId = result.getInt("last_payment_id");
    }
    return lastPaymentId + 1;  
}
     private int savePaymentToDatabase(int orderId, String selectedPaymentMethod) throws SQLException {
    double priceOrder = calculateTotalPriceOrder();
    System.out.println("Calculated priceOrder: " + priceOrder);
    int newPaymentId = paymentIdSelanjutnya(DatabaseConnect.connectDB());

    String paymentSql = "INSERT INTO Payment (payment_id, order_id, fee_driver, price_order) VALUES (?, ?, ?, ?)";
    PreparedStatement Payment = DatabaseConnect.connectDB().prepareStatement(paymentSql);
    

    Payment.setInt(1, newPaymentId);  
    Payment.setInt(2, orderId);  
    Payment.setDouble(3, 5000);  
    Payment.setDouble(4, priceOrder);
    Payment.executeUpdate();

    return newPaymentId;  
}
     private void saveMethodPayment(int paymentId, String selectedPaymentMethod) throws SQLException {
    String methodSql = "INSERT INTO Method_Payment (payment_id, method) VALUES (?, ?)";
    PreparedStatement Method = DatabaseConnect.connectDB().prepareStatement(methodSql);
    
    
    Method.setInt(1, paymentId);  
    Method.setString(2, selectedPaymentMethod);  
    Method.executeUpdate();
}
     private void printNota(int orderId) {
    try {
        String reportPath = "src/coba/reportBISMILLAH.jasper";

        Map<String, Object> parameters = new HashMap<>();
        parameters.put("order_id", orderId); 
        
        Connection con = DatabaseConnect.connectDB();

        JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, parameters, con);

        
        JasperViewer.viewReport(jasperPrint, false);
        
        con.close();
    } catch (JRException | SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Gagal mencetak nota: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

     
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBayar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton rbCash;
    private javax.swing.JRadioButton rbQris;
    // End of variables declaration//GEN-END:variables
}
