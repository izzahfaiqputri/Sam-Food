/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package coba;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.PreparedStatement;

/**
 *
 * @author Lenovo
 */
public class Food extends javax.swing.JFrame {

    /**
     * Creates new form Food
     */
    public Food() {
        initComponents();
        updData();
        btnSave.setEnabled(false); // Aktifkan tombol Save        
        btnCancel.setEnabled(false);
        setTextFieldsEditable(false);
        jTable1.getSelectionModel().addListSelectionListener(event -> {
        if (!event.getValueIsAdjusting() && jTable1.getSelectedRow() != -1) {
            loadSelectedRowDataToFields(); // Memuat data baris terpilih ke JTextField
        }
        ButSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ButSearchActionPerformed(evt);
        }
    });
    });  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ButSearch = new javax.swing.JButton();
        jTextField_Search = new javax.swing.JTextField();
        ButNext = new javax.swing.JButton();
        ButLast = new javax.swing.JButton();
        ButPrev = new javax.swing.JButton();
        ButFirst = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField_foodID = new javax.swing.JTextField();
        jTextField_price = new javax.swing.JTextField();
        jTextField_image = new javax.swing.JTextField();
        jTextField_foodName = new javax.swing.JTextField();
        jTextField_restaurantID = new javax.swing.JTextField();
        btnNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(244, 194, 194));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Food_Id", "Price", "Image", "Food Name", "Restaurant_Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(jTable1);

        ButSearch.setText("Search");
        ButSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButSearchActionPerformed(evt);
            }
        });

        jTextField_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_SearchActionPerformed(evt);
            }
        });

        ButNext.setText(">");
        ButNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButNextActionPerformed(evt);
            }
        });

        ButLast.setText(">>");
        ButLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButLastActionPerformed(evt);
            }
        });

        ButPrev.setText("<");
        ButPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButPrevActionPerformed(evt);
            }
        });

        ButFirst.setText("<<");
        ButFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButFirstActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 14)); // NOI18N
        jLabel1.setText("ID Food");

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 14)); // NOI18N
        jLabel2.setText("Price");

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 14)); // NOI18N
        jLabel3.setText("Image");

        jLabel4.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 14)); // NOI18N
        jLabel4.setText("Food Name");

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 14)); // NOI18N
        jLabel5.setText("ID Restaurant");

        jTextField_foodID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_foodIDActionPerformed(evt);
            }
        });

        jTextField_price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_priceActionPerformed(evt);
            }
        });

        jTextField_foodName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_foodNameActionPerformed(evt);
            }
        });

        jTextField_restaurantID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_restaurantIDActionPerformed(evt);
            }
        });

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setText("<< back");
        btnBack.setContentAreaFilled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(181, 181, 181)
                            .addComponent(ButFirst)
                            .addGap(18, 18, 18)
                            .addComponent(ButPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(236, 236, 236)
                            .addComponent(ButNext, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addComponent(ButLast)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(37, 37, 37)
                                    .addComponent(jTextField_foodName, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField_restaurantID, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(btnSave)
                                            .addGap(59, 59, 59)
                                            .addComponent(btnCancel)
                                            .addGap(11, 11, 11)))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField_Search)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ButSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 807, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(28, 28, 28)
                                .addComponent(jTextField_image))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(jTextField_foodID, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(btnNew)
                                    .addGap(38, 38, 38)
                                    .addComponent(btnEdit)
                                    .addGap(48, 48, 48)
                                    .addComponent(btnDelete))
                                .addComponent(jTextField_price, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(78, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(btnBack)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ButSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButLast)
                    .addComponent(ButNext)
                    .addComponent(ButPrev)
                    .addComponent(ButFirst))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_foodID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_foodName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_restaurantID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_image, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addGap(54, 54, 54)
                .addComponent(btnBack)
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_SearchActionPerformed

    }//GEN-LAST:event_jTextField_SearchActionPerformed

    private void ButPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButPrevActionPerformed
        if (currentRow > 0) { // Pastikan tidak melewati baris pertama
        currentRow--;
        jTable1.setRowSelectionInterval(currentRow, currentRow); // Pilih baris sebelumnya
        updFields(); // Perbarui JTextField berdasarkan baris
    }
    updTombolNavigasi(); // Perbarui status tombol navigasi
    }//GEN-LAST:event_ButPrevActionPerformed

    private void ButFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButFirstActionPerformed
    currentRow = 0; // Baris pertama
    jTable1.setRowSelectionInterval(currentRow, currentRow); // Pilih baris pertama
    updFields(); // Perbarui JTextField
    updTombolNavigasi(); // Perbarui status tombol navigasi
    }//GEN-LAST:event_ButFirstActionPerformed

    private void jTextField_foodIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_foodIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_foodIDActionPerformed

    private void jTextField_priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_priceActionPerformed

    private void jTextField_restaurantIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_restaurantIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_restaurantIDActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MenuAdmin menuadmin1 = new MenuAdmin();
        menuadmin1.setVisible(true);
        this.dispose();         // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void jTextField_foodNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_foodNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_foodNameActionPerformed
    private boolean isEditing = false;
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
      if (jTable1.getSelectedRow() != -1) { // Pastikan ada baris yang dipilih
        jTextField_foodID.setForeground(Color.RED);
        jTextField_price.setForeground(Color.RED);
        jTextField_image.setForeground(Color.RED);
        jTextField_foodName.setForeground(Color.RED);
        jTextField_restaurantID.setForeground(Color.RED);
        isEditing = true; // Aktifkan mode edit
        btnSave.setEnabled(true); // Aktifkan tombol Save
        btnCancel.setEnabled(true); // Aktifkan tombol Cancel
        setTextFieldsEditable(true);
        jTextField_foodID.setEditable(false); // ID User tidak dapat diubah
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, "Silakan pilih data yang ingin diedit.", "Edit Data", javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnEditActionPerformed

    private void ButSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButSearchActionPerformed
        String queryCari = jTextField_Search.getText().trim(); // Ambil teks pencarian
        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
    try (Connection connection = DriverManager.getConnection(connectionUrl);
         PreparedStatement statemnt = connection.prepareStatement(queryCari.isEmpty() ? "SELECT * FROM food" : "SELECT * FROM food WHERE food_name LIKE ?"
         )) {

        if (!queryCari.isEmpty()) {
            statemnt.setString(1, "%" + queryCari + "%"); // Menggunakan wildcard untuk pencarian
        }

        try (ResultSet resultSet = statemnt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Kosongkan tabel sebelum menampilkan hasil baru

            while (resultSet.next()) {
                // Tambahkan hasil ke JTable
                Object[] row = {
                    resultSet.getLong("food_id"),
                    resultSet.getString("price"),
                    resultSet.getString("image"),
                    resultSet.getString("food_name"),
                    resultSet.getString("restaurant_id")
                };
                model.addRow(row);
            }

            if (model.getRowCount() > 0) {
                currentRow = 0; // Reset ke baris pertama
                jTable1.setRowSelectionInterval(currentRow, currentRow);
                updFields(); // Perbarui JTextField berdasarkan hasil pertama
            } else {
                clearText(); // Kosongkan JTextField jika tidak ada data
            }

            updTombolNavigasi(); // Perbarui tombol navigasi
        }
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mencari data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    } 
    }//GEN-LAST:event_ButSearchActionPerformed

    private void ButNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButNextActionPerformed
      if (currentRow < jTable1.getRowCount() - 1) { // Pastikan tidak melewati baris terakhir
        currentRow++;
        jTable1.setRowSelectionInterval(currentRow, currentRow); // Pilih baris berikutnya
        updFields(); // Perbarui JTextField berdasarkan baris
    }
    updTombolNavigasi(); // Perbarui status tombol navigasi
    }//GEN-LAST:event_ButNextActionPerformed

    private void ButLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButLastActionPerformed
    currentRow = jTable1.getRowCount() - 1; // Baris terakhir
    jTable1.setRowSelectionInterval(currentRow, currentRow); // Pilih baris terakhir
    updFields(); // Perbarui JTextField
    updTombolNavigasi(); // Perbarui status tombol navigasi        // TODO add your handling code here:
    }//GEN-LAST:event_ButLastActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        toggleAdd = true; // Aktifkan mode penambahan data baru
        setTextFieldsEditable(true);
        clearText(); // Kosongkan semua JTextField
        btnSave.setEnabled(true); // Aktifkan tombol Save        
        btnCancel.setEnabled(true);        // TODO add your handling code here:
    }//GEN-LAST:event_btnNewActionPerformed
    private boolean toggleDel = false;
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
  btnSave.setEnabled(true);
btnCancel.setEnabled(true);

    // Nonaktifkan tombol lain
    btnNew.setEnabled(false);
    btnEdit.setEnabled(false);
    btnDelete.setEnabled(false);

    // Ubah warna teks pada JTextField menjadi merah
    jTextField_foodID.setForeground(Color.RED);
    jTextField_price.setForeground(Color.RED);
    jTextField_image.setForeground(Color.RED);
    jTextField_foodName.setForeground(Color.RED);
    jTextField_restaurantID.setForeground(Color.RED);

    toggleDel = true; // Tandai bahwa mode delete sedang aktif
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
       if (toggleAdd) { // Jika dalam mode penambahan data baru
        String idUser = jTextField_foodID.getText().trim();
        String username = jTextField_price.getText().trim();
        String password = jTextField_image.getText().trim();
        String phoneNumber = jTextField_foodName.getText().trim();
        String email = jTextField_restaurantID.getText().trim();

        // Validasi input
        if (idUser.isEmpty() || username.isEmpty() || password.isEmpty() || phoneNumber.isEmpty() || email.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
        String queryInput = "INSERT INTO food (food_id, price, image, food_name, restaurant_id) VALUES (?, ?, ?, ?, ?)";

        try (Connection connection = DriverManager.getConnection(connectionUrl);
             PreparedStatement statement = connection.prepareStatement(queryInput)) {

            // Set parameter SQL
            statement.setInt(1, Integer.parseInt(idUser));
            statement.setString(2, username);
            statement.setString(3, password);
            statement.setString(4, phoneNumber);
            statement.setString(5, email);

            // Eksekusi query
            statement.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            // Reset status dan perbarui tabel
            toggleAdd = false;
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
            jTextField_foodID.setEditable(false);
            updData(); // Memuat ulang data di tabel
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menambahkan data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }else if (isEditing) {
        // Logika untuk mengupdate data
        updateData();
        
        }else if (toggleDel) { // Jika dalam mode delete
            String idUser = jTextField_foodID.getText().trim();

            if (idUser.isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "Tidak ada data yang dipilih untuk dihapus.", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
                return;
        }

        String queryDel = "DELETE FROM Food WHERE food_ID = ?";
        String connectionUrl =
             "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
        try (Connection connection = DriverManager.getConnection(connectionUrl);
             PreparedStatement statement = connection.prepareStatement(queryDel)) {

            // Set parameter SQL
            statement.setInt(1, Integer.parseInt(idUser));

            // Eksekusi query
            statement.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil dihapus!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            // Reset status dan perbarui tabel
            toggleDel = false;
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
            resetWarnaText();
             btnNew.setEnabled(true);
            btnEdit.setEnabled(true);
            btnDelete.setEnabled(true);
            updData(); // Memuat ulang data di tabel
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
        resetWarnaText();
        setTextFieldsEditable(false); 
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
      if (toggleAdd) { // Hanya berlaku jika sedang dalam mode penambahan data
        toggleAdd = false; // Batalkan mode penambahan data
        btnSave.setEnabled(false); // Nonaktifkan tombol Save
        btnCancel.setEnabled(false); // Nonaktifkan tombol Cancel
        jTextField_foodID.setEditable(false); // Kunci kembali kolom ID User

        // Kembalikan data JTextField sesuai baris yang saat ini dipilih di tabel
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            jTextField_foodID.setText(jTable1.getValueAt(selectedRow, 0).toString());
            jTextField_price.setText(jTable1.getValueAt(selectedRow, 1).toString());
            jTextField_image.setText(jTable1.getValueAt(selectedRow, 2).toString());
            jTextField_foodName.setText(jTable1.getValueAt(selectedRow, 3).toString());
            jTextField_restaurantID.setText(jTable1.getValueAt(selectedRow, 4).toString());
        } else {
            clearText(); // Jika tidak ada baris yang dipilih, kosongkan JTextField
            }
        }else if (isEditing) {
        // Logika untuk membatalkan pengeditan data
        isEditing = false;
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);

        // Kembalikan data JTextField sesuai baris yang saat ini dipilih di tabel
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            jTextField_foodID.setText(jTable1.getValueAt(selectedRow, 0).toString());
            jTextField_price.setText(jTable1.getValueAt(selectedRow, 1).toString());
            jTextField_image.setText(jTable1.getValueAt(selectedRow, 2).toString());
            jTextField_foodName.setText(jTable1.getValueAt(selectedRow, 3).toString());
            jTextField_restaurantID.setText(jTable1.getValueAt(selectedRow, 4).toString());
        }
    }else if ((toggleDel)) {
        jTextField_foodID.setForeground(Color.BLACK);
        jTextField_price.setForeground(Color.BLACK);
        jTextField_image.setForeground(Color.BLACK);
        jTextField_foodName.setForeground(Color.BLACK);
        jTextField_restaurantID.setForeground(Color.BLACK);

        // Reset tombol dan kembalikan ke kondisi awal
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);

        toggleDel = false;
            
        }
    

    
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jTable1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1AncestorAdded

    private void updateData() {
        String foodId = jTextField_foodID.getText().trim();
        String price = jTextField_price.getText().trim();
        String image = jTextField_image.getText().trim();
        String foodName = jTextField_foodName.getText().trim();
        String restaurantId = jTextField_restaurantID.getText().trim();

    if (price.isEmpty() || image.isEmpty() || foodName.isEmpty() || restaurantId.isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Peringatan", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    String connectionUrl =
       "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";

    String updateQuery = "UPDATE food SET price = ?, image = ?, food_name = ?, restaurant_id = ? WHERE food_Id = ?";

    try (Connection connection = DriverManager.getConnection(connectionUrl);
         PreparedStatement statement = connection.prepareStatement(updateQuery)) {

        statement.setString(1, price);
        statement.setString(2, image);
        statement.setString(3, foodName);
        statement.setString(4, restaurantId);
        statement.setInt(5, Integer.parseInt(foodId));

        int rowsUpdated = statement.executeUpdate();
        if (rowsUpdated > 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Data berhasil diperbarui.", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            updData(); // Refresh data di tabel
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Data gagal diperbarui.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat memperbarui data.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    // Kembali ke mode normal
    isEditing = false;
    btnSave.setEnabled(false);
    btnCancel.setEnabled(false);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Food.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Food().setVisible(true);
                String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
        try {
            // Load the JDBC driver (optional for newer Java versions)
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // Create the connection
            Connection connection = DriverManager.getConnection(connectionUrl);

            System.out.println("Koneksi berhasil!");

            // Close the connection (optional)
            connection.close();

        } catch (ClassNotFoundException e) {
            System.err.println("Food tidak ditemukan: " + e.getMessage());
        } catch (SQLException e) {
            System.err.println("Koneksi gagal: " + e.getMessage());
        }
            }
        });
    }
    private boolean isNavigating = false; // Untuk melacak navigasi
    ResultSet allRS;
    boolean isInserted;
    private int currentRow = 0; // Untuk melacak baris saat ini
    private DefaultTableModel searchModel; // Model untuk hasil pencarian
    private boolean toggleAdd = false;
    
    private void updData() {
    String query = "SELECT * FROM food"; // Ganti sesuai nama tabel Anda
    String connectionUrl =
            "jdbc:sqlserver://GLADYSABELVG:1433;" +
                "database=SAMFOOD;" +
                "user=Gladys Abel;" +
                "password=231525;" +
                "encrypt=true;" +
                "trustServerCertificate=true;" +
                "loginTimeout=30;";
    try {
        Connection connection = DriverManager.getConnection(connectionUrl);
        PreparedStatement statement = connection.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        allRS = statement.executeQuery(); // Inisialisasi allRS

        // Model untuk JTable
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Membersihkan tabel sebelum diisi

        while (allRS.next()) {
            Object[] row = {
                allRS.getLong("food_id"), // Ganti dengan nama kolom di tabel Anda
                allRS.getString("price"),
                allRS.getString("image"),
                allRS.getString("food_name"),
                allRS.getInt("restaurant_id")
            };
            model.addRow(row);
        }

        // Pilih baris pertama secara otomatis jika data ada
        if (model.getRowCount() > 0) {
            allRS.first(); // Pindahkan ResultSet ke baris pertama
            loadSelectedRowDataToFields(); // Tampilkan data baris pertama ke JTextField
            
            ButPrev.setEnabled(false);
            ButFirst.setEnabled(false);
            ButNext.setEnabled(true);
            ButLast.setEnabled(true);
        }

    } catch (SQLException e) {
        System.err.println("Error saat mengisi tabel: " + e.getMessage());
    }
    
}
    private void loadSelectedRowDataToFields() {
    try {
        // Pastikan ResultSet tidak null dan berada di baris yang valid
        if (allRS != null && !allRS.isAfterLast() && !allRS.isBeforeFirst()) {
            jTextField_foodID.setText(allRS.getString("food_id")); // ID User
            jTextField_price.setText(allRS.getString("price")); // Username
            jTextField_image.setText(allRS.getString("image")); // Password
            jTextField_foodName.setText(allRS.getString("food_name")); // Phone Number
            jTextField_restaurantID.setText(allRS.getString("restaurant_id")); // Email
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    
}
    private void resetWarnaText() {
    jTextField_foodID.setForeground(Color.BLACK);
    jTextField_price.setForeground(Color.BLACK);
    jTextField_image.setForeground(Color.BLACK);
    jTextField_foodName.setForeground(Color.BLACK);
    jTextField_restaurantID.setForeground(Color.BLACK);
}   
    private void updTombolNavigasi() {
    ButNext.setEnabled(currentRow < jTable1.getRowCount() - 1);
    ButPrev.setEnabled(currentRow > 0);
    ButLast.setEnabled(currentRow < jTable1.getRowCount() - 1);
    ButFirst.setEnabled(currentRow > 0);
}
    private void updFields() {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        jTextField_foodID.setText(jTable1.getValueAt(selectedRow, 0).toString());
        jTextField_price.setText(jTable1.getValueAt(selectedRow, 1).toString());
        jTextField_image.setText(jTable1.getValueAt(selectedRow, 2).toString());
        jTextField_foodName.setText(jTable1.getValueAt(selectedRow, 3).toString());
        jTextField_restaurantID.setText(jTable1.getValueAt(selectedRow, 4).toString());
    }
}
    private void setTextFieldsEditable(boolean editable) {
    jTextField_foodID.setEditable(editable);
    jTextField_price.setEditable(editable);
    jTextField_image.setEditable(editable);
    jTextField_foodName.setEditable(editable);
    jTextField_restaurantID.setEditable(editable);
}
    private void clearText() {
        jTextField_foodID.setText("");
        jTextField_price.setText("");
        jTextField_image.setText("");
        jTextField_foodName.setText("");
         jTextField_restaurantID.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButFirst;
    private javax.swing.JButton ButLast;
    private javax.swing.JButton ButNext;
    private javax.swing.JButton ButPrev;
    private javax.swing.JButton ButSearch;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField_Search;
    private javax.swing.JTextField jTextField_foodID;
    private javax.swing.JTextField jTextField_foodName;
    private javax.swing.JTextField jTextField_image;
    private javax.swing.JTextField jTextField_price;
    private javax.swing.JTextField jTextField_restaurantID;
    // End of variables declaration//GEN-END:variables
}
